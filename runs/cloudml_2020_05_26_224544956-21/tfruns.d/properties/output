
> library(keras)

> library(here)

> library(cloudml)

> FLAGS <- flags(flag_numeric("n_nodes", 400), flag_numeric("rate", 
+     0.4), flag_numeric("lr", 1e-05))

> generator_augmented <- image_data_generator(rescale = 1/255, 
+     rotation_range = 30, width_shift_range = 0.2, height_shift_range = 0.2, 
+     z .... [TRUNCATED] 

> generator <- image_data_generator(rescale = 1/255)

> train <- flow_images_from_directory(directory = gs_data_dir_local("gs://unil-dp-project/data/train"), 
+     generator = generator_augmented, target .... [TRUNCATED] 

> valid <- flow_images_from_directory(directory = gs_data_dir_local("gs://unil-dp-project/data/test"), 
+     generator = generator, target_size = c(3 .... [TRUNCATED] 

> model_base <- application_vgg16(include_top = FALSE, 
+     weights = "imagenet", input_shape = c(300, 300, 3))

> freeze_weights(model_base)

> model <- keras_model_sequential() %>% model_base %>% 
+     layer_flatten() %>% layer_dense(units = FLAGS$n_nodes, activation = "relu", 
+     ) %>% .... [TRUNCATED] 

> model %>% compile(optimizer = optimizer_rmsprop(lr = FLAGS$lr), 
+     loss = loss_categorical_crossentropy, metric = "accuracy")

> model %>% fit_generator(generator = train, steps_per_epoch = train$n/train$batch_size, 
+     epochs = 100, callbacks = callback_early_stopping(pati .... [TRUNCATED] 

> unfreeze_weights(object = model_base, from = "block5_conv1")

> model %>% compile(optimizer = optimizer_rmsprop(lr = FLAGS$lr), 
+     loss = loss_categorical_crossentropy, metric = "accuracy")

> model %>% fit_generator(generator = train, steps_per_epoch = train$n/train$batch_size, 
+     epochs = 100, callbacks = callback_early_stopping(pati .... [TRUNCATED] 
